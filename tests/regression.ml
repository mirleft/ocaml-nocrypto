open OUnit2

open Notest

open Nocrypto
open Nocrypto.Uncommon


let bad_key = "((p 124851653861343321423352121088577535176003723345257721154680614816732539125363954176728541095388213571480229766054004260213213354593451395590277663874568841623541114162269650033358865899451170234924700493963350059578222524985105468919740912424043228282440036213373777828457362800653877696795895357662918899847)(q 1262377340326872731302721311430736156106932731509)(gg 100399661335079586129791189791118249626899729549398018367977998316642661727062541427680858958951356779044328764793386557967578458761847381073682931578893909062599320131341258457447372640929998615991523945779625597621004323990657353084248897921888588741652851462844161825716903276606491245037834619274910507999)(x 599309328947636269349679351765752706154377763329)(y 1194560827946269819042452638314668299970203153027845188679717313451450916838978123495371992310815652032470925639925646148398758465532221618138578367688374623149753921271340510416274079482189711684792943685515381284573029164668519226608037997796584419339378665393955168267537473909769911985484198097040262054))"

let good_key = "((p 126600291408171773993583624220752668066125221453561283055472395012127857287519590941292010276079281852751911637882867783592999852251099986944081699126787976170120160508520948409768440712264776132368474815926955710679839884274471443734295448152301878129933993451559696401523939526919997106734965141212346895993)(q 771973935920125323187585816644439061922616511687)(gg 56597485881890890894394526214812775903383015942176466373603141542497869076449177011091876070028046161958633012253563225763720711820217566348345083460348490388147750012161770849983810064466365170755695933573222977888121604637449777477944802177531268524992604966591490819785419527075018567928910451313504821899)(x 86965069137988330642658483446372681332472572286)(y 106546806000978184018081556190754388720002001908381688354037785871422235737307516600639456321130541423771783320970548247816449051159675625076129807426566154680563707245937361973767878555663027387154834200678011319372024049550666764602835162205946450613347284438061248274873264689380367157761674216202817583191))"

let test_sign_verify data key _ =
  let pub = Dsa.pub_of_priv key in

  let r, s = Dsa.sign ~mask:`No ~k:(Numeric.Z.of_int 3) ~key data in
  if Dsa.verify ~key:pub (r, s) data then ()
  else assert_failure "DSA signature invalid (no masking, k = 3)" ;

  let r, s = Dsa.sign ~mask:`Yes ~k:(Numeric.Z.of_int 3) ~key data in
  if Dsa.verify ~key:pub (r, s) data then ()
  else assert_failure "DSA signature invalid (masking, k = 3)" ;

  let r, s = Dsa.sign ~k:(Numeric.Z.of_int 3) ~key data in
  if Dsa.verify ~key:pub (r, s) data then ()
  else assert_failure "DSA signature invalid (default masking, k = 3)" ;

  let r, s = Dsa.sign ~mask:`No ~key data in
  if Dsa.verify ~key:pub (r, s) data then ()
  else assert_failure "DSA signature invalid (no masking, no k selected)" ;

  let r, s = Dsa.sign ~mask:`Yes ~key data in
  if Dsa.verify ~key:pub (r, s) data then ()
  else assert_failure "DSA signature invalid (masking, no k selected)" ;

  let r, s = Dsa.sign ~key data in
  if Dsa.verify ~key:pub (r, s) data then ()
  else assert_failure "DSA signature invalid (default masking, no k selected)"


let test_dsa key a =
  let data = Cs.of_hex
      "01 a4 d3 f2 34 bd e0 b2 cc 3b 29 55 16 cb 65 35
     4f f3 ed f4 40 e7 aa fa d2 ee ef 43 8a ea 00 62"
  and key = Dsa.priv_of_sexp (Sexplib.Sexp.of_string key)
  in
  test_sign_verify data key a

let regression_suite = [
  "DSA signature with good key" >:: (test_dsa good_key) ;
  "DSA signature with bad key" >:: (test_dsa bad_key)
]
