open OUnit2

open Notest

open Nocrypto
open Nocrypto.Uncommon


let dsa_data =
  ("01 a4 d3 f2 34 bd e0 b2 cc 3b 29 55 16 cb 65 35
     4f f3 ed f4 40 e7 aa fa d2 ee ef 43 8a ea 00 62",
   "((p 124851653861343321423352121088577535176003723345257721154680614816732539125363954176728541095388213571480229766054004260213213354593451395590277663874568841623541114162269650033358865899451170234924700493963350059578222524985105468919740912424043228282440036213373777828457362800653877696795895357662918899847)(q 1262377340326872731302721311430736156106932731509)(gg 100399661335079586129791189791118249626899729549398018367977998316642661727062541427680858958951356779044328764793386557967578458761847381073682931578893909062599320131341258457447372640929998615991523945779625597621004323990657353084248897921888588741652851462844161825716903276606491245037834619274910507999)(x 599309328947636269349679351765752706154377763329)(y 1194560827946269819042452638314668299970203153027845188679717313451450916838978123495371992310815652032470925639925646148398758465532221618138578367688374623149753921271340510416274079482189711684792943685515381284573029164668519226608037997796584419339378665393955168267537473909769911985484198097040262054))")

let test_dsa _ =
  let data_in = Cs.of_hex (fst dsa_data)
  and key = Dsa.priv_of_sexp (Sexplib.Sexp.of_string (snd dsa_data))
  in

  let r, s = Dsa.sign ~key data_in in
  let pub = Dsa.pub_of_priv key in
  if Dsa.verify ~key:pub (r, s) data_in then ()
  else assert_failure "DSA signature invalid"

let regression_suite = [
  "DSA signature with some key" >:: test_dsa
]
